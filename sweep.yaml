program: main.py
command:
  - ${env}
  - ${interpreter}
  - -O
  - ${program}
  - ${args}
metric:
  name: population/mean_f1
  goal: maximize
method: random
parameters:
  criterion_key:
    values: ['bce', 'mse']
  general_model_config:
    parameters:
      patch_size:
        value: 8
      dim:
        value: 128
      depth:
        value: 1
      heads:
        value: 2
      mlp_dim:
        value: 128
      dropout:
        value: 0.16
      emb_dropout:
        value: 0.15
  pretrain:
    parameters:
      epochs:
        value: 16
      batch_size:
        value: 16
      lr:
        value: 0.0002
      train_fraction:
        value: 0.7
  finetune:
    parameters:
      n_frozen_layers:
        # value: 2
        values: [ 0, 1, 2 ]
      num_episodes:
        value: 10
      epochs:
        values: [ 5, 10, 15]
      lr:
        # value: 0.0005
        distribution: log_uniform_values
        min: 0.0001
        max: 0.005
      batch_size:
        value: 16
      do_finetuning:
        value: True
  online:
    parameters:
      num_episodes:
        value: 30
        # values: [ 0, 6, 12, 18, 24, 30 ]
      batch_size:
        # value: 4
        values: [ 1, 2, 4, 8, 16 ]
      epochs:
        # value: 10
        values: [ 10, 15, 20 ]
      lr:
        # value: 0.0005
        distribution: log_uniform_values
        min: 0.0001
        max: 0.001
      num_sessions:
        value: 3
        # values: [ 1, 2, 3 ]
      n_frozen_layers:
        # value: 0
        values: [ 0, 1, 2 ]
      train_intervals:
        # value: 1
        values: [ 1, 2, 3, 4, 5 ]
      first_training_episode:
        # value: 1
        values: [ 0, 1, 2, 3, 4 ]
      additional_train_episodes:
        # value: 4
        values: [ 1, 2, 3, 4, 5 ]
      adaptive_training:
        value: False
        # values: [ True, False ]
      balance_classes:
        value: False
        # values: [ True, False ]
      buffer_size:
        # value: 2_500
        values: [ 2_000, 2_500, 3000 ]
